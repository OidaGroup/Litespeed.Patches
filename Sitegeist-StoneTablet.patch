diff --git a/Classes/Domain/Form/FormDirectory.php b/Classes/Domain/Form/FormDirectory.php
index c189c23..59764de 100644
--- a/Classes/Domain/Form/FormDirectory.php
+++ b/Classes/Domain/Form/FormDirectory.php
@@ -72,17 +72,27 @@ public function findFormLocatorByIdentifier(string $formId): ?FormLocator

     private function getContentContexts(): \Iterator
     {
-        $languagePresets = $this->contentDimensionPresetSource->getAllPresets()['language']['presets'];
+        $languagePresets = $this->contentDimensionPresetSource->getAllPresets()['language']['presets'] ?? null;

-        foreach (array_keys($languagePresets) as $preset) {
-            $languageValues = $languagePresets[$preset]['values'];
-
-            yield $contentContext = $this->contentContextFactory->create([
-                'dimensions' => ['language' => $languageValues],
-                'targetDimensions' => ['language' => reset($languageValues)],
+        if (empty($languagePresets)) {
+            $contentContext = $this->contentContextFactory->create([
+                'dimensions' => [],
+                'targetDimensions' => [],
                 'invisibleContentShown' => true,
                 'inaccessibleContentShown' => true
             ]);
+            yield $contentContext;
+        } else {
+            foreach (array_keys($languagePresets) as $preset) {
+                $languageValues = $languagePresets[$preset]['values'];
+
+                yield $contentContext = $this->contentContextFactory->create([
+                    'dimensions' => ['language' => $languageValues],
+                    'targetDimensions' => ['language' => reset($languageValues)],
+                    'invisibleContentShown' => true,
+                    'inaccessibleContentShown' => true
+                ]);
+            }
         }
     }
 }
diff --git a/Classes/Runtime/Action/RegisterFormAction.php b/Classes/Runtime/Action/RegisterFormAction.php
index 67e7262..f61cb08 100644
--- a/Classes/Runtime/Action/RegisterFormAction.php
+++ b/Classes/Runtime/Action/RegisterFormAction.php
@@ -8,6 +8,7 @@

 namespace Sitegeist\StoneTablet\Runtime\Action;

+use Neos\Flow\Annotations as Flow;
 use Neos\ContentRepository\Domain\Model\Node;
 use Neos\Flow\Mvc\ActionResponse;
 use Neos\Flow\ResourceManagement\PersistentResource;
@@ -21,6 +22,9 @@

 class RegisterFormAction extends AbstractAction
 {
+    #[Flow\InjectConfiguration(path: 'defaultExcludedFields')]
+    protected $defaultExcludedFields;
+
     public const DATE_FORMAT = 'Y-m-d';
     public function __construct(
         private readonly FormRegistrationRepository $formRegistrationRepository,
@@ -36,10 +40,12 @@ public function perform(): ?ActionResponse
         $formData = $this->prepareFormDataForSerialization($this->options['formData']);

         $excludedFields = array_map(
-            fn($excludedField) => Field::fromArray($excludedField)->name,
+            fn ($excludedField) => Field::fromArray($excludedField)->name,
             $formNode->getProperty('excludedFields') ?: []
         );

+        $excludedFields = array_merge($excludedFields, $this->defaultExcludedFields);
+
         foreach ($formData as $fieldName => $fieldValue) {
             if (is_object($fieldValue)) {
                 $excludedFields[] = $fieldName;
diff --git a/Configuration/Settings.yaml b/Configuration/Settings.yaml
index 0777178..1108270 100644
--- a/Configuration/Settings.yaml
+++ b/Configuration/Settings.yaml
@@ -8,3 +8,7 @@ Neos:
         javascript:
           '@sitegeist/stonetablet-editors':
             resource: 'resource://Sitegeist.StoneTablet/Public/Neos.Ui/Plugin.js'
+
+Sitegeist:
+  StoneTablet:
+    defaultExcludedFields: []
diff --git a/Resources/Private/Fusion/Override/Prototypes/Runtime/RuntimeForm.fusion b/Resources/Private/Fusion/Override/Prototypes/Runtime/RuntimeForm.fusion
index 9329a51..923d2ed 100644
--- a/Resources/Private/Fusion/Override/Prototypes/Runtime/RuntimeForm.fusion
+++ b/Resources/Private/Fusion/Override/Prototypes/Runtime/RuntimeForm.fusion
@@ -11,12 +11,3 @@ prototype(Neos.Fusion.Form:Runtime.RuntimeForm) {
         register.@if.isExportable = ${q(node).property('isExportable')}
     }
 }
-
-
-prototype(Nordmann.NordmannGlobal:Document.WebPage) < prototype(Neos.Fusion:Component) {
-    renderer = Nordmann.NordmannGlobal:Document.Base {
-        body = Nordmann.Shared:Layout.Page {
-            presentationObject = ${Nordmann.Page.forWebPage(documentNode, documentNode.context, documentNode.context.inBackend)}
-        }
-    }
-}
diff --git a/Classes/Domain/Form/FormLocator.php b/Classes/Domain/Form/FormLocator.php
index fe70b10..21a432c 100644
--- a/Classes/Domain/Form/FormLocator.php
+++ b/Classes/Domain/Form/FormLocator.php
@@ -43,9 +43,11 @@ public static function fromFormIdentifier(
             )
         );

+        $formTitle = $formNode->getProperty('formTitle') ?? $formNode->getLabel();
+
         return new self(
             $formId,
-            $formNode->getProperty('title'),
+            $formTitle,
             $path
         );
     }
diff --git a/NodeTypes/Mixin/ExportableForm.yaml b/NodeTypes/Mixin/ExportableForm.yaml
index eb61de9..1b00213 100644
--- a/NodeTypes/Mixin/ExportableForm.yaml
+++ b/NodeTypes/Mixin/ExportableForm.yaml
@@ -1,25 +1,14 @@
 'Sitegeist.StoneTablet:Mixin.ExportableForm':
   abstract: true
-  superTypes:
-    'Neos.Neos:Content': true
-
   ui:
     inspector:
       groups:
         export:
-          label: 'Export'
+          label: 'Form Export'
           icon: archive
           position: start 10

   properties:
-    title:
-      type: string
-      ui:
-        label: 'Form Titel'
-        inspector:
-          group: export
-      validation:
-        'Neos.Neos/Validation/NotEmptyValidator': { }
     isExportable:
       type: boolean
       defaultValue: false
@@ -27,19 +16,31 @@
         label: "Exportable"
         inspector:
           group: export
+          position: 10
+    formTitle:
+      type: string
+      ui:
+        label: 'Form Title'
+        inspector:
+          group: export
+          position: 20
+          hidden: 'ClientEval: !node.properties.isExportable'
+          editorOptions:
+            placeholder: 'ClientEval: node.label'
     excludedFields:
       type: array
       ui:
-        label: "Excluded Fields"
+        label: 'Excluded Fields'
         help:
-          message: "Field names which must be excluded from export"
+          message: 'Field names which must be excluded from export'
         inspector:
           group: export
           editor: Sitegeist.InspectorGadget/Inspector/Editor
+          position: 30
+          hidden: 'ClientEval: !node.properties.isExportable'
           editorOptions:
             isCollection: true
             isSortable: true
             itemType: Sitegeist\StoneTablet\Domain\Field
             labels:
               addItem: 'Add Field'
-
diff --git a/Classes/Domain/Form/FormRegistrationExport.php b/Classes/Domain/Form/FormRegistrationExport.php
index f314155..04f68fc 100644
--- a/Classes/Domain/Form/FormRegistrationExport.php
+++ b/Classes/Domain/Form/FormRegistrationExport.php
@@ -20,9 +20,9 @@ final class FormRegistrationExport
 {
     public function __construct(
         public readonly \DateTimeImmutable $exportDate,
-        public readonly FormRegistrations  $registrations,
-        public readonly FormLocator        $formLocator,
-        public readonly FormDirectory      $formDirectory,
+        public readonly FormRegistrations $registrations,
+        public readonly FormLocator $formLocator,
+        public readonly FormDirectory $formDirectory,
         private readonly Archive $archive
     ) {
     }
@@ -31,99 +31,111 @@ public function createExcelContent(): string
     {
         $fieldNames = $this->getFieldNames($this->registrations);
         $spreadsheet = new Spreadsheet();
-        $metaHeaderRow = $spreadsheet->getActiveSheet()->getRowIterator(1)->current();
-        $currentRowIndex = $metaHeaderRow->getRowIndex();
-        $metaHeaderRow->getWorksheet()->getCell('A' . $currentRowIndex)->setValue('Title');
-        $metaHeaderRow->getWorksheet()->getCell('B' . $currentRowIndex)->setValue(
-            $this->formLocator->title
-                ? $this->formLocator->title . ' (' . $this->formLocator->formId . ')'
-                : $this->formLocator->formId
-        );
-        $spreadsheet->getActiveSheet()->insertNewRowBefore(2, 1);
-        $headerRow = $spreadsheet->getActiveSheet()->getRowIterator(2)->current();
-        $currentRowIndex = $headerRow->getRowIndex();
-        $metaHeaderRow->getWorksheet()->getCell('A' . $currentRowIndex)->setValue('Path');
-        $metaHeaderRow->getWorksheet()->getCell('B' . $currentRowIndex)->setValue(
-            $this->formLocator->path ?: ''
-        );
-        $spreadsheet->getActiveSheet()->insertNewRowBefore(3, 1);
-        $headerRow = $spreadsheet->getActiveSheet()->getRowIterator(3)->current();
-        $currentRowIndex = $headerRow->getRowIndex();
-        $metaHeaderRow->getWorksheet()->getCell('A' . $currentRowIndex)->setValue('Export Date');
-        $metaHeaderRow->getWorksheet()->getCell('B' . $currentRowIndex)->setValue(
-            $this->exportDate->format('Y-m-d H:i:s')
-        );
+        $exportDirectory = ExportDirectory::create();

-        $spreadsheet->getActiveSheet()->insertNewRowBefore(4, 1);
-        $headerRow = $spreadsheet->getActiveSheet()->getRowIterator(4)->current();
-        $currentRowIndex = $headerRow->getRowIndex();
-        $column = 'A';
-        $metaHeaderRow->getWorksheet()->getCell($column . $currentRowIndex)->setValue('Identifier');
-        $column++;
+        // Add some data
+        $spreadsheet
+            ->setActiveSheetIndex(0)
+            ->setCellValue('A1', 'Title')
+            ->setCellValue(
+                'B1',
+                $this->formLocator->title
+                    ? $this->formLocator->title .
+                        ' (' .
+                        $this->formLocator->formId .
+                        ')'
+                    : $this->formLocator->formId
+            )
+            ->setCellValue('A2', 'Path')
+            ->setCellValue('B2', $this->formLocator->path ?: '')
+            ->setCellValue('A3', 'Export Date')
+            ->setCellValue('B3', $this->exportDate->format('Y-m-d H:i:s'))
+            ->setCellValue('A4', 'Identifier');
+
+        $column = 'B';
         foreach ($fieldNames as $fieldName) {
-            $metaHeaderRow->getWorksheet()->getCell($column . $currentRowIndex)->setValue($fieldName);
+            $spreadsheet
+                ->getActiveSheet()
+                ->setCellValue($column . '4', $fieldName);
             $column++;
         }
         if ($fieldNames) {
-            $metaHeaderRow->getWorksheet()->getCell($column . $currentRowIndex)->setValue('Request Date');
+            $spreadsheet
+                ->getActiveSheet()
+                ->setCellValue($column . '4', 'Request Date');
         }
-        $currentRowIndex = 5;
-        $spreadsheet->getActiveSheet()->insertNewRowBefore(5, $this->registrations->count());
-        $exportDirectory = ExportDirectory::create();

+        $currentRowIndex = 5;
         foreach ($this->registrations as $registration) {
             $column = 'A';
-            $metaHeaderRow->getWorksheet()->getCell(
-                $column . $currentRowIndex
-            )->setValue(
-                $registration->identifier
-            );
+            $spreadsheet
+                ->getActiveSheet()
+                ->setCellValue(
+                    $column . $currentRowIndex,
+                    $registration->identifier
+                );
             $column++;
             $currentRegistrationFields = $registration->formData;
-
             foreach ($fieldNames as $fieldName) {
                 $fieldValue = $currentRegistrationFields[$fieldName] ?? null;

-                if ($fieldValue && str_starts_with($fieldValue, RegisteredUploadField::CELL_PREFIX) ) {
-                    $registeredUploadField = new RegisteredUploadField($fieldValue);
+                if (
+                    $fieldValue &&
+                    str_starts_with(
+                        $fieldValue,
+                        RegisteredUploadField::CELL_PREFIX
+                    )
+                ) {
+                    $registeredUploadField = new RegisteredUploadField(
+                        $fieldValue
+                    );

                     $fileName = $this->archive->exportResourceFromRegisteredUploadField(
                         $registeredUploadField,
                         $exportDirectory
                     );

-                    $metaHeaderRow->getWorksheet()->getCell(
-                        $column . $currentRowIndex
-                    )->getHyperlink()->setUrl('./' . ExportDirectory::UPLOADS . $registeredUploadField->extractExportFileName());
-
-                    $metaHeaderRow->getWorksheet()->getCell(
-                        $column . $currentRowIndex
-                    )->setValue(
-                        $fileName
-                    );
+                    $spreadsheet
+                        ->getActiveSheet()
+                        ->getCell($column . $currentRowIndex)
+                        ->setValue($fileName)
+                        ->getHyperlink()
+                        ->setUrl(
+                            './' .
+                                ExportDirectory::UPLOADS .
+                                $registeredUploadField->extractExportFileName()
+                        );
                 } else {
-                    $metaHeaderRow->getWorksheet()->getCell(
-                        $column . $currentRowIndex
-                    )->setValue(
-                        CellValue::fromFormData($currentRegistrationFields, $fieldName)->value
-                    );
+                    $spreadsheet
+                        ->getActiveSheet()
+                        ->setCellValue(
+                            $column . $currentRowIndex,
+                            CellValue::fromFormData(
+                                $currentRegistrationFields,
+                                $fieldName
+                            )->value
+                        );
                 }
-
                 $column++;
             }
-            $metaHeaderRow->getWorksheet()->getCell(
-                $column . $currentRowIndex
-            )->setValue(
-                $registration->recordedAt->format(FormRegistrationRepository::DATE_FORMAT)
-            );
-
-            $currentRowIndex++;
+            $spreadsheet
+                ->getActiveSheet()
+                ->setCellValue(
+                    $column . $currentRowIndex,
+                    $registration->recordedAt->format(
+                        FormRegistrationRepository::DATE_FORMAT
+                    )
+                );
         }
-        $excelPathAndName = $exportDirectory->path . basename($exportDirectory->path) .  '.xlsx';
+
+        $excelPathAndName =
+            $exportDirectory->path . basename($exportDirectory->path) . '.xlsx';
         $writer = new ExcelWriter($spreadsheet);
         $writer->save($excelPathAndName);

-        $zipFilePath = $this->archive->compressExportDirectory($exportDirectory);
+        $zipFilePath = $this->archive->compressExportDirectory(
+            $exportDirectory
+        );

         if ($zipFilePath) {
             $result = Files::getFileContents($zipFilePath);
